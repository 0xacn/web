service cloud.firestore {
	match /databases/{database}/documents {
		match /users/{uid} {
			allow read: if signedIn()
			allow write: if signedInWith(uid)
			match /name {
				allow read
				allow create, update: if signedInWith(uid) && isValidString(newData())
				allow delete: if false
			}
			match /email {
				allow create, update: if checkEmail(newData()) && isEmailUnique(newData())
				allow delete: if false
			}
			match /slug {
				allow read
				allow delete: if false
			}
			match /joined {
				allow read
				allow create: if signedInWith(uid)
				allow update, delete: if false
			}
			match /lastOnline {
				allow read
				allow create: if signedInWith(uid)
				allow update, delete: if false
			}
			match /lastActivity {
				allow read
				allow create: if signedInWith(uid)
				allow update, delete: if false
			}
			match /cardDrafts/{draftId} {
				allow read, write: if signedInWith(uid)
			}
			match /ratingDrafts/{deckId} {
				allow read, write: if signedInWith(uid)
			}
			match /invites/{deckId} {
				allow read: if signedInWith(uid)
			}
			match /settings/{setting} {
				allow read, write: if signedInWith(uid)
			}
			match /tokens/{token} {
				allow read, write: if signedInWith(uid)
			}
			match /ratings/{deckId} {
				allow read: if signedInWith(uid)
				match /cards/{cardId} {
					allow read: if signedInWith(uid)
				}
			}
			match /uploads/{uploadId} {
				allow read, write: if signedInWith(uid)
			}
			match /decks/{deckId} {
				allow read, update, delete//: if signedInWith(uid) && (isDeckPublic(deckId) || canViewDeck(deckId) || isDeckOwner(deckId))
				match /mastered {
					allow write: if false
				}
				match /role {
					allow write: if false
				}
				match /hidden {
					allow update: if signedInWith(uid) && (isDeckPublic(deckId) || canViewDeck(deckId) || isDeckOwner(deckId)) && (newData() is bool)
					allow delete: if false
				}
				match /cards/{cardId} {
					allow read: if signedInWith(uid) && (isDeckPublic(deckId) || canViewDeck(deckId) || isDeckOwner(deckId))
					allow write: if false
					match /history/{historyId} {
						allow read, create: if signedInWith(uid) && (isDeckPublic(deckId) || canViewDeck(deckId) || isDeckOwner(deckId))
						allow update, delete: if false
						match /date {
							allow create: if false
						}
						match /next {
							allow create: if false
						}
						match /rating {
							allow create: if signedInWith(uid) && (isDeckPublic(deckId) || canViewDeck(deckId) || isDeckOwner(deckId)) && (newData() is int) && (newData() >= 0 && newData() <= 5)
						}
						match /elapsed {
							allow create: if false
						}
					}
				}
			}
		}
		match /settings/{setting} {
			allow read
		}
		match /decks/{deckId} {
			allow read: if isDeckPublic(deckId) || (signedIn() && (isDeckOwner(deckId) || canViewDeck(deckId)))
			allow create: if signedIn()
			allow update: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId))
			allow delete: if isDeckOwner(deckId)
			match /name {
				allow create: if signedIn() && isValidString(newData())
				allow update: if signedIn() && (isDeckOwner(deckId) || isDeckAdmin(deckId)) && isValidString(newData())
				allow delete: if false
			}
			match /subtitle {
				allow create: if signedIn() && isValidString(newData())
				allow update: if signedIn() && (isDeckOwner(deckId) || isDeckAdmin(deckId)) && isValidString(newData())
				allow delete: if false
			}
			match /description {
				allow create: if signedIn() && (newData() is string)
				allow update: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId)) && (newData() is string)
				allow delete: if false
			}
			match /tags {
				allow create: if signedIn() && (newData() is list)
				allow update: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId)) && (newData() is list)
				allow delete: if false
			}
			match /public {
				allow create: if signedIn() && (newData() is bool)
				allow update: if (isDeckOwner(deckId) || isDeckAdmin(deckId)) && (newData() is bool)
				allow delete: if false
			}
			match /count {
				allow create: if signedIn() && (newData() is int) && newData() == 0
				allow update, delete: if false
			}
			match /views {
				allow create: if signedIn() && (newData().total is int) && newData().total == 0 && (newData().unique is int) && newData().unique == 0
				allow update, delete: if false
			}
			match /downloads {
				allow create: if signedIn() && (newData().total is int) && newData().total == 0 && (newData().current is int) && newData().current == 0
				allow update, delete: if false
			}
			match /ratings {
				allow create: if signedIn() && (newData().average is int) && newData().average == 0 && (newData()[1] is int) && newData()[1] == 0 && (newData()[2] is int) && newData()[2] == 0 && (newData()[3] is int) && newData()[3] == 0 && (newData()[4] is int) && newData()[4] == 0 && (newData()[5] is int) && newData()[5] == 0
			}
			match /users/{uid} {
				allow read: if isDeckPublic(deckId) || (signedIn() && (isDeckOwner(deckId) || canViewDeck(deckId)))
				match /cards/{cardId} {
					allow read: if isDeckPublic(deckId) || (signedIn() && (isDeckOwner(deckId) || canViewDeck(deckId)))
				}
			}
			match /creator {
				allow create: if isValidString(newData()) && signedInWith(newData())
				allow update, delete: if false
			}
			match /owner {
				allow create: if isValidString(newData()) && signedInWith(newData())
				allow update: if isDeckOwner(deckId) && isValidString(newData()) && !signedInWith(newData()) && userExists(newData())
				allow delete: if false
			}
			match /created {
				allow create: if signedIn()
				allow update, delete: if false
			}
			match /updated {
				allow create: if signedIn()
				allow update, delete: if false
			}
			match /permissions/{uid} {
				allow read, write: if signedIn() && (isDeckOwner(deckId) || isDeckAdmin(deckId))
				match /role {
					allow create, update: if signedIn() && (isDeckOwner(deckId) || isDeckAdmin(deckId)) && (newData() is string) && (newData() == 'viewer' || newData() == 'editor' || newData() == 'admin')
					allow delete: if false
				}
				match /date {
					allow update, delete: if false
				}
				match /confirmed {
					allow write: if false
				}
				match /status {
					allow create: if signedIn() && (isDeckOwner(deckId) || isDeckAdmin(deckId)) && (newData() is int) && newData() == 0
					allow update, delete: if false
				}
				match /sender {
					allow create: if signedInWith(newData()) && (isDeckOwner(deckId) || isDeckAdmin(deckId))
					allow update, delete: if false
				}
			}
			match /cards/{cardId} {
				allow read: if isDeckPublic(deckId) || (signedIn() && (isDeckOwner(deckId) || canViewDeck(deckId)))
				allow write: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId))
				match /front {
					allow write: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId)) && isValidString(newData())
				}
				match /back {
					allow write: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId)) && isValidString(newData())
				}
				match /created {
					allow update, delete: if false
				}
				match /updated {
					allow update, delete: if false
				}
				match /likes {
					allow create: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId)) && (newData() is int) && newData() == 0
					allow update, delete: if false
				}
				match /dislikes {
					allow create: if signedIn() && (isDeckOwner(deckId) || canEditDeck(deckId)) && (newData() is int) && newData() == 0
					allow update, delete: if false
				}
			}
		}

		function authId() {
			return request.auth.uid
		}

		function signedIn() {
			return request.auth != null
		}

		function signedInWith(uid) {
			return signedIn() && authId() == uid
		}

		function oldData() {
			return resource.data
		}

		function newData() {
			return request.resource.data
		}

		function isValidString(data) {
			return (data is string) && data != ''
		}

		function checkEmail(data) {
			return isValidString(data)
		}

		function isEmailUnique(email) {
			return !exists(/databases/$(database)/documents/users/{allUsers=**}/email/$(email))
		}

		function canViewDeck(deckId) {
			return permissionExists(deckId) && permission(deckId).accepted
		}

		function permissionExists(deckId) {
			return exists(/databases/$(database)/documents/decks/$(deckId)/permissions/$(authId()))
		}

		function permission(deckId) {
			return get(/databases/$(database)/documents/decks/$(deckId)/permissions/$(authId())).data
		}

		function canEditDeck(deckId) {
			return permissionExists(deckId) && ((permission(deckId).role == 'editor' && permission(deckId).accepted) || isDeckAdmin(deckId))
		}

		function isDeckOwner(deckId) {
			return deckExists(deckId) && signedInWith(deck(deckId).owner)
		}

		function isDeckAdmin(deckId) {
			return permissionExists(deckId) && (permission(deckId).role == 'admin' && permission(deckId).accepted)
		}

		function deckExists(deckId) {
			return exists(/databases/$(database)/documents/decks/$(deckId))
		}

		function deck(deckId) {
			return get(/databases/$(database)/documents/decks/$(deckId)).data
		}

		function isDeckPublic(deckId) {
			return deckExists(deckId) && deck(deckId).public
		}

		function userExists(uid) {
			return exists(/databases/$(database)/documents/users/$(uid))
		}
	}
}