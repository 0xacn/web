service cloud.firestore {
	match /databases/{database}/documents {
		match /users/{uid} {
			match /name {
				allow read
				allow write: if signedInWith(uid) && isValidString(newData())
			}
			match /email {
				allow read, write: if signedInWith(uid) && checkEmail(newData()) && isValidString(newData())
			}
			match /link {
				allow read
				allow write: if signedInWith(uid) && isValidString(newData())
			}
			match /decks/{deckId} {
				match /mastered {
					allow read, create: if signedInWith(uid) && newData() == 0
				}
				match /cards/{cardId} {
					match /count {
						allow read, create: if signedInWith(uid) && newData() == 0
					}
					match /correct {
						allow read, create: if signedInWith(uid) && newData() == 0
					}
					match /streak {
						allow read, create: if signedInWith(uid) && newData() == 0
					}
					match /last {
						allow read, create: if signedInWith(uid)
					}
					match /next {
						allow read, create: if signedInWith(uid)
					}
					match /history/{historyId} {
						match /date {
							allow read, create: if signedInWith(uid)
						}
						match /next {
							allow read, create: if signedInWith(uid)
						}
						match /correct {
							allow read, create: if signedInWith(uid) && newData().isBoolean()
						}
						match /elapsed {
							allow read, create: if signedInWith(uid) && newData().isNumber()
						}
					}
				}
			}
		}
		match /emails/{email}/id {
			allow read: if signedInWith(oldData())
		}
		match /links/{link}/id {
			allow read
			allow create: if signedInWith(newData())
			allow delete: if signedInWith(oldData())
		}
		match /decks/{deckId} {
			match /name {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
				allow write: if (isDeckOwner(deckId) || canEditDeck(deckId)) && isValidString(newData())
			}
			match /description {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
				allow write: if (isDeckOwner(deckId) || canEditDeck(deckId)) && newData().isString()
			}
			match /public {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
				allow write: if isDeckOwner(deckId) && newData().isBoolean()
			}
			match /count {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
				allow create: if signedIn() && newData() == 0
			}
			match /creator {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
				allow create: if signedInWith(newData()) && isValidString(newData())
			}
			match /owner {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
				allow write: if signedInWith(oldData()) && userExists(newData()) && isValidString(newData())
			}
			match /permissions/{userId}/role {
				allow read: if isDeckOwner(deckId) || canViewDeck(deckId)
				allow write: if isDeckOwner(deckId) && (newData() == 'viewer' || newData() == 'editor')
			}
			match /cards/{cardId} {
				match /front {
					allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
					allow write: if (isDeckOwner(deckId) || canEditDeck(deckId)) && isValidString(newData())
				}
				match /back {
					allow read: if isDeckOwner(deckId) || canViewDeck(deckId) || isDeckPublic(deckId)
					allow write: if (isDeckOwner(deckId) || canEditDeck(deckId)) && isValidString(newData())
				}
			}
		}

		function authId() {
			return request.auth.uid
		}

		function signedIn() {
			return request.auth != null
		}

		function signedInWith(uid) {
			return authId() == uid
		}

		function oldData() {
			return resource.data
		}

		function newData() {
			return request.resource.data
		}

		function isValidString(data) {
			return data.isString() && data != ''
		}

		function checkEmail(email) {
			return true
		}

		function canViewDeck(deckId) {
			return exists(/databases/$(database)/documents/decks/$(deckId)/permissions/$(authId()))
		}

		function canEditDeck(deckId) {
			return get(/databases/$(database)/documents/decks/$(deckId)/permissions/$(authId())).data.role == 'editor'
		}

		function isDeckOwner(deckId) {
			return signedInWith(get(/databases/$(database)/documents/decks/$(deckId)).data.owner)
		}

		function isDeckPublic(deckId) {
			return get(/databases/$(database)/documents/decks/$(deckId)).data.public
		}

		function userExists(userId) {
			return exists(/databases/$(database)/documents/users/$(userId))
		}
	}
}